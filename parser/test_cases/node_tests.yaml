tests:
  - name: minimal_node
    description: Node with just package and executable
    input: |
      from launch import LaunchDescription
      from launch_ros.actions import Node

      def generate_launch_description():
          return LaunchDescription([
              Node(package='my_pkg', executable='my_node')
          ])
    expected:
      nodes:
        - package: my_pkg
          executable: my_node
  
  - name: node_with_name_and_output
    description: Node with name and output screen
    input: |
      from launch import LaunchDescription
      from launch_ros.actions import Node

      def generate_launch_description():
          return LaunchDescription([
              Node(
                  package='demo_nodes',
                  executable='talker',
                  name='talker_node',
                  output='screen'
              )
          ])
    expected:
      nodes:
        - package: demo_nodes
          executable: talker
          name: talker_node
          output: screen
  
  - name: node_with_namespace
    description: Node with namespace specified
    input: |
      from launch import LaunchDescription
      from launch_ros.actions import Node

      def generate_launch_description():
          return LaunchDescription([
              Node(
                  package='demo',
                  executable='listener',
                  namespace='robot1'
              )
          ])
    expected:
      nodes:
        - package: demo
          executable: listener
          namespace: robot1
  
  - name: node_with_parameters_dict
    description: Node with parameters as inline dict
    input: |
      from launch import LaunchDescription
      from launch_ros.actions import Node

      def generate_launch_description():
          return LaunchDescription([
              Node(
                  package='demo',
                  executable='node',
                  parameters=[{'use_sim_time': True}]
              )
          ])
    expected:
      nodes:
        - package: demo
          executable: node
          parameters:
            - use_sim_time: true
  
  - name: node_with_parameters_yaml
    description: Node with parameters pointing to a yaml file
    input: |
      from launch import LaunchDescription
      from launch_ros.actions import Node

      def generate_launch_description():
          return LaunchDescription([
              Node(
                  package='demo',
                  executable='node',
                  parameters=['config/params.yaml']
              )
          ])
    expected:
      nodes:
        - package: demo
          executable: node
          parameters:
            - config/params.yaml
  
  - name: node_with_remappings
    description: Node with topic remapping
    input: |
      from launch import LaunchDescription
      from launch_ros.actions import Node

      def generate_launch_description():
          return LaunchDescription([
              Node(
                  package='demo',
                  executable='node',
                  remappings=[('/input', '/robot1/input')]
              )
          ])
    expected:
      nodes:
        - package: demo
          executable: node
          remappings:
            - ["/input", "/robot1/input"]
    
  - name: node_with_launch_config
    description: Node using LaunchConfiguration in parameter
    input: |
      from launch import LaunchDescription
      from launch_ros.actions import Node
      from launch.substitutions import LaunchConfiguration

      def generate_launch_description():
          return LaunchDescription([
              Node(
                  package='demo',
                  executable='node',
                  parameters=[{'use_sim_time': LaunchConfiguration('use_sim_time')}]
              )
          ])
    expected:
      nodes:
        - package: demo
          executable: node
          parameters:
            - use_sim_time: ${LaunchConfiguration:use_sim_time}

  - name: node_with_all_fields
    description: Full featured Node
    input: |
      from launch import LaunchDescription
      from launch_ros.actions import Node
      from launch.substitutions import LaunchConfiguration

      def generate_launch_description():
          return LaunchDescription([
              Node(
                  package='pkg',
                  executable='exe',
                  name='robot_node',
                  namespace='ns1',
                  output='screen',
                  parameters=[
                    {'param1': 'value1'},
                    {'param2': LaunchConfiguration('some_param')}
                  ],
                  remappings=[
                    ('/foo', '/bar'),
                    ('/cmd', '/robot1/cmd')
                  ]
              )
          ])
    expected:
      nodes:
        - package: pkg
          executable: exe
          name: robot_node
          namespace: ns1
          output: screen
          parameters:
            - param1: value1
            - param2: ${LaunchConfiguration:some_param}
          remappings:
            - ['/foo', '/bar']
            - ['/cmd', '/robot1/cmd']
