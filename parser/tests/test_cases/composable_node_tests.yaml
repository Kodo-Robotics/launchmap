tests:
  - name: composable_node_basic
    description: Minimal composable node with just package and plugin
    input: |
      from launch_ros.actions import ComposableNode
      from launch import LaunchDescription

      def generate_launch_description():
          return LaunchDescription([
              ComposableNode(
                  package='demo_pkg',
                  plugin='demo_pkg/PluginNode'
              )
          ])
    expected:
      unattached_composable_nodes:
        - package: demo_pkg
          plugin: demo_pkg/PluginNode
      arguments: []
      launch_argument_usages: []
      undeclared_launch_configurations: []

  - name: composable_node_with_params_remaps
    description: Composable node with parameters and remapping
    input: |
      from launch_ros.actions import ComposableNode
      from launch import LaunchDescription

      def generate_launch_description():
          return LaunchDescription([
              ComposableNode(
                  package='foo_pkg',
                  plugin='foo_pkg/MyNode',
                  parameters=[{'use_sim_time': 'true'}],
                  remappings=[('input', 'camera_input')]
              )
          ])
    expected:
      unattached_composable_nodes:
        - package: foo_pkg
          plugin: foo_pkg/MyNode
          parameters:
            - use_sim_time: 'true'
          remappings:
            - ['input', 'camera_input']
    
  - name: composable_node_to_container
    description: Composable node defined within a container using ComposableNodeContainer
    input: |
      from launch_ros.actions import ComposableNodeContainer, ComposableNode
      from launch import LaunchDescription

      def generate_launch_description():
          container = ComposableNodeContainer(
              name='my_container',
              package='rclcpp_components',
              executable='component_container_mt',
              namespace='',
              composable_node_descriptions=[
                  ComposableNode(
                      package='bar_pkg',
                      plugin='bar_pkg/BarNode',
                      name='bar'
                  )
              ]
          )

          return LaunchDescription([container])
    expected:
      composable_nodes_container:
        - target_container: my_container
          package: rclcpp_components
          executable: component_container_mt
          composable_nodes:
            - package: bar_pkg
              plugin: bar_pkg/BarNode
              name: bar
      launch_argument_usages: []
      undeclared_launch_configurations: []

  - name: composable_node_with_launchconfig
    description: Composable node that uses LaunchConfiguration in its parameters
    input: |
      from launch_ros.actions import ComposableNode
      from launch.substitutions import LaunchConfiguration
      from launch.actions import DeclareLaunchArgument
      from launch import LaunchDescription

      def generate_launch_description():
          return LaunchDescription([
              DeclareLaunchArgument('sim_time', default_value='false'),
              ComposableNode(
                  package='demo_pkg',
                  plugin='demo_pkg/SimNode',
                  parameters=[{'use_sim_time': LaunchConfiguration('sim_time')}]
              )
          ])
    expected:
      arguments:
        - name: sim_time
          default_value: 'false'
      unattached_composable_nodes:
        - package: demo_pkg
          plugin: demo_pkg/SimNode
          parameters:
            - use_sim_time: ${LaunchConfiguration:sim_time}
      launch_argument_usages:
        - argument: sim_time
          path: unattached_composable_nodes[0].parameters[0].use_sim_time
      undeclared_launch_configurations: []

  - name: load_composable_nodes_explicit
    description: Composable node loaded into container using LoadComposableNodes
    input: |
      from launch_ros.actions import LoadComposableNodes, ComposableNode
      from launch import LaunchDescription

      def generate_launch_description():
          return LaunchDescription([
              LoadComposableNodes(
                  target_container='my_container',
                  composable_node_descriptions=[
                      ComposableNode(
                          package='demo_pkg',
                          plugin='demo_pkg/FooNode'
                      )
                  ]
              )
          ])
    expected:
      composable_nodes_container:
        - target_container: my_container
          composable_nodes:
            - package: demo_pkg
              plugin: demo_pkg/FooNode
      launch_argument_usages: []
      undeclared_launch_configurations: []

  - name: composable_container_with_loaded_nodes
    description: ComposableNodeContainer is defined and nodes are dynamically loaded using LoadComposableNodes into the same container.
    input: |
      from launch import LaunchDescription
      from launch_ros.actions import ComposableNodeContainer, LoadComposableNodes
      from launch_ros.descriptions import ComposableNode

      def generate_launch_description():
          container = ComposableNodeContainer(
              name='my_container',
              namespace='',
              package='rclcpp_components',
              executable='component_container',
              output='screen',
              composable_node_descriptions=[]
          )

          load_nodes = LoadComposableNodes(
              target_container='my_container',
              composable_node_descriptions=[
                  ComposableNode(
                      package='demo_nodes_cpp',
                      plugin='demo_nodes_cpp::Talker'
                  ),
                  ComposableNode(
                      package='demo_nodes_cpp',
                      plugin='demo_nodes_cpp::Listener'
                  )
              ]
          )

          return LaunchDescription([container, load_nodes])
    expected:
      composable_nodes_container:
        - target_container: my_container
          package: rclcpp_components
          executable: component_container
          output: screen
          composable_nodes:
            - package: demo_nodes_cpp
              plugin: demo_nodes_cpp::Talker
            - package: demo_nodes_cpp
              plugin: demo_nodes_cpp::Listener
      launch_argument_usages: []
      undeclared_launch_configurations: []