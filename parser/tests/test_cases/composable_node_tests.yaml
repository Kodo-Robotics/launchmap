tests:
  - name: composable_node_minimal
    description: Basic composable node with package, plugin and name
    input: |
      from launch import LaunchDescription
      from launch_ros.actions import LoadComposableNodes
      from launch_ros.descriptions import ComposableNodes

      def generate_launch_description():
          return LaunchDescription([
              LoadComposableNodes(
                  target_container='my_container',
                  composable_node_descriptions=[
                      ComposableNode([
                          package='demo_nodes_cpp',
                          plugin='demo_nodes_cpp::Talker',
                          name='talker_component'
                      ])
                  ]
              )
          ])
    expected:
      composable_nodes:
        - package: demo_nodes_cpp
          plugin: demo_nodes_cpp::Talker
          name: talker_component
  
  - name: composable_node_with_parameters
    description: Composable node with parameters and remappings
    input: |
      from launch import LaunchDescription
      from launch_ros.actions import LoadComposableNodes
      from launch_ros.descriptions import ComposableNode

      def generate_launch_description():
          return LaunchDescription([
              LoadComposableNodes(
                  target_container='container',
                  composable_node_descriptions=[
                      ComposableNode(
                          package='my_pkg',
                          plugin='my_pkg::MyPlugin',
                          name='my_node',
                          parameters=[{'use_sim_time': True}],
                          remappings=[('/tf', 'tf')]
                      )
                  ]
              )
          ])
    expected:
      composable_nodes:
        - package: my_pkg
          plugin: my_pkg::MyPlugin
          name: my_node
          parameters:
            - use_sim_time: True
          remappings:
            - ['/tf', 'tf']
  
  - name: composable_node_with_launch_config
    description: Composable node using LaunchConfiguration in parameters
    input: |
      from launch import LaunchDescription
      from launch.substitions import LaunchConfiguration
      from launch_ros.actions import LoadComposableNodes
      form launch_ros.descriptions import ComposableNode

      def generate_launch_description():
          use_sim_time = LaunchConfiguration('use_sim_time')
          return LaunchDescription([
              LoadComposableNodes(
                  target_container='container',
                  composable_node_descriptions=[
                      ComposableNode(
                          package='demo',
                          plugin='demo::Comp',
                          parameters=[{'use_sim_time': use_sim_time}]
                      )
                  ]
              )
          ])
    expected:
      arguments:
        - name: use_sim_time
      composable_nodes:
        - package: demo
          plugin: demo::Comp
          parameters:
            - use_sim_time: "${LaunchConfiguration:use_sim_time}"
  
  - name: composable_node_from_variable
    description: ComposableNode is first assigned to a variable, then passed to LoadComposableNodes
    input: |
      from launch import LaunchDescription
      from launch_ros.actions import LoadComposableNodes
      from launch_ros.descriptions import ComposableNode

      def generate_launch_description():
          comp = ComposableNode(
              package='demo_pkg',
              plugin='demo_pkg::DemoPlugin',
              name='demo_component'
          )
          return LaunchDescription([
              LoadComposableNodes(
                  target_container='container',
                  composable_node_descriptions=[comp]
              )
          ])
    expected:
      composable_nodes:
        - package: demo_pkg
          plugin: demo_pkg::DemoPlugin
          name: demo_component
  
  - name: composable_node_var_with_parameters
    description: ComposableNode with parameters and remappings, passed via variable
    input: |
      from launch import LaunchDescription
      from launch_ros.actions import LoadComposableNodes
      from launch_ros.descriptions import ComposableNode

      def generate_launch_description():
          node = ComposableNode(
              package='complex_pkg',
              plugin='complex_pkg::Plugin',
              parameters=[{'foo': 'bar'}],
              remapping=[('in', 'out')]
          )
          return LaunchDescription([
              LoadComposableNodes(
                  target_container='container',
                  composable_node_descriptions=[node]
              )
          ])
    expected:
      composable_nodes:
        - package: complex_pkg
          plugin: complex_pkg::Plugin
          parameters:
            - foo: bar
          remappings:
            - ['in', 'out']
  
  - name: composable_node_mixed_inline_and_var
    description: One ComposableNode via variable, one inline
    input: |
      from launch import LaunchDescription
      from launch_ros.actions import LoadComposableNodes
      from launch_ros.descriptions import ComposableNode

      def generate_launch_description():
          var_node = ComposableNode(
              package='pkg1',
              plugin='pkg1::Plugin1',
              name='n1'
          )
          return LaunchDescription([
              LoadComposableNodes(
                  target_container='container',
                  composable_node_descriptions=[
                      var_node,
                      ComposableNode(
                          package='pkg2',
                          plugin='pkg2::Plugin2',
                          name='n2'
                      )
                  ]
              )
          ])
    expected:
      composable_nodes:
        - package: pkg1
          plugin: pkg1::Plugin1
          name: n1
        - package: pkg2
          plugin: pkg2::Plugin2
          name: n2