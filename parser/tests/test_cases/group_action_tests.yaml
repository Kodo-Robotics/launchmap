tests:
  - name: basic_group_with_node
    description: A group with a single node child
    input: |
      from launch import LaunchDescription
      from launch.actions import GroupAction
      from launch_ros.actions import Node

      def generate_launch_description():
          return LaunchDescription([
              GroupAction([
                  Node(package="demo", executable="basic")
              ])
          ])
    expected:
      groups:
        - actions:
            nodes:
              - package: demo
                executable: basic

  - name: group_with_namespace
    description: GroupAction with PushRosNamespace
    input: |
      from launch import LaunchDescription
      from launch.actions import GroupAction, PushRosNamespace
      from launch_ros.actions import Node

      def generate_launch_description():
          return LaunchDescription([
              GroupAction([
                  PushRosNamespace("robot1"),
                  Node(package="demo", executable="ns_node")
              ])
          ])
    expected:
      groups:
        - namespace: robot1
          actions:
            nodes:
              - package: demo
                executable: ns_node

  - name: group_from_variable_list
    description: GroupAction with variable-assigned children
    input: |
      from launch import LaunchDescription
      from launch.actions import GroupAction
      from launch_ros.actions import Node

      def generate_launch_description():
          children = [
              Node(package="demo", executable="a"),
              Node(package="demo", executable="b")
          ]
          return LaunchDescription([
              GroupAction(children)
          ])
    expected:
      groups:
        - actions:
            nodes:
              - package: demo
                executable: a
              - package: demo
                executable: b

  - name: group_with_starred_list
    description: GroupAction with starred unpacked children
    input: |
      from launch import LaunchDescription
      from launch.actions import GroupAction
      from launch_ros.actions import Node

      def generate_launch_description():
          group_nodes = [Node(package="demo", executable="x")]
          return LaunchDescription([
              GroupAction([*group_nodes])
          ])
    expected:
      groups:
        - actions:
            nodes:
              - package: demo
                executable: x
  
  # - name: group_with_function_nodes
  #   description: GroupAction with function-generated nodes
  #   input: |
  #     from launch import LaunchDescription
  #     from launch.actions import GroupAction
  #     from launch_ros.actions import Node

  #     def make_nodes():
  #         return [
  #             Node(package="demo", executable="n1"),
  #             Node(package="demo", executable="n2")
  #         ]
      
  #     def generate_launch_description():
  #         return LaunchDescription([
  #             GroupAction(make_nodes())
  #         ])
  #   expected:
  #     groups:
  #       - actions:
  #           nodes:
  #             - package: demo
  #               executable: n1
  #             - package: demo
  #               executable: n2
  
  - name: group_with_namespace_and_variable
    description: PushRosNamespace from config + children from variable
    input: |
      from launch import LaunchDescription
      from launch.actions import GroupAction, PushRosNamespace, DeclareLaunchArgument
      from launch.substitutions import LaunchConfiguration
      from launch_ros.actions import Node

      def generate_launch_description():
          declare = DeclareLaunchArgument("ns", default_value="robot2")
          ns = LaunchConfiguration("ns")
          group_nodes = [Node(package="demo", executable="mixed")]

          return LaunchDescription([
              declare,
              GroupAction([
                  PushRosNamespace(ns),
                  *group_nodes
              ])
          ])
    expected:
      arguments:
        - name: ns
          default_value: robot2
      groups:
        - namespace: "${LaunchConfiguration:ns}"
          actions:
            nodes:
              - package: demo
                executable: mixed
      launch_argument_usages:
        - argument: ns
          path: groups[0].namespace
      undeclared_launch_configurations: []
            
  - name: nested_groups
    description: Nested GroupAction with namespace and nodes
    input: |
      from launch import LaunchDescription
      from launch.actions import GroupAction, PushRosNamespace
      from launch_ros.actions import Node

      def generate_launch_description():
          return LaunchDescription([
              GroupAction([
                  PushRosNamespace("outer_ns"),
                  GroupAction([
                      PushRosNamespace("inner_ns"),
                      Node(package="demo", executable="deep")
                  ])
              ])
          ])
    expected:
      groups:
        - namespace: outer_ns
          actions:
            groups:
              - namespace: inner_ns
                actions:
                  nodes:
                    - package: demo
                      executable: deep