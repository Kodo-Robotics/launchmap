tests:
  - name: include_literal_file
    description: IncludeLaunchDescription with direct string file path
    input: |
      from launch import LaunchDescription
      from launch.actions import IncludeLaunchDescription
      from launch.launch_description_sources import PythonLaunchDescriptionSource

      def generate_launch_description():
          return LaunchDescription([
              IncludeLaunchDescription(PythonLaunchDescriptionSource("sub_launch.py"))
          ])
    expected:
      includes:
        - launch_description_source: sub_launch.py
          launch_arguments: {}
          included: {}
  
  - name: include_with_launch_arguments
    description: Include with forwareded argumentes using LaunchConfiguration
    input: |
      from launch import LaunchDescription
      from launch.actions import DeclareLaunchArgument, IncludeLaunchDescription
      from launch.launch_description_sources import PythonLaunchDescriptionSource
      from launch.substitutions import LaunchConfiguration

      def generate_launch_description():
          return LaunchDescription([
              DeclareLaunchArgument("map_file", default_value="map.yaml"),
              IncludeLaunchDescription(
                  PythonLaunchDescriptionSource("mapper_launch.py"),
                  launch_arguments={"map": LaunchConfiguration("map_file")}.items()
              )
          ])
    expected:
      arguments:
        - name: map_file
          default_value: map.yaml
      includes:
        - launch_description_source: mapper_launch.py
          launch_arguments:
            map: "${LaunchConfiguration:map_file}"
          included: {}
      launch_argument_usages:
        - argument: map_file
          path: includes[0].launch_arguments.map
      undeclared_launch_configurations: []

  - name: include_path_from_pathjoin
    description: Use PathJoinSubstitution to build path
    input: |
      from launch import LaunchDescription
      from launch.actions import IncludeLaunchDescription
      from launch.launch_description_sources import PythonLaunchDescriptionSource
      from launch.substitutions import PathJoinSubstitution, FindPackageShare

      def generate_launch_description():
          return LaunchDescription([
              IncludeLaunchDescription(
                  PythonLaunchDescriptionSource(
                      PathJoinSubstitution([FindPackageShare("my_pkg"), "launch", "other.py"])
                  )
              )
          ])
    expected:
      includes:
        - launch_description_source: ${PathJoinSubstitution:[FindPackageShare('my_pkg'), 'launch', 'other.py']}
          launch_arguments: {}

  - name: include_with_variable_assignment
    description: IncludeLaunchDescription assigned to variable before use_sim_time
    input: |
      from launch import LaunchDescription
      from launch.actions import IncludeLaunchDescription
      from launch.launch_description_sources import PythonLaunchDescriptionSource

      def generate_launch_description():
          inc = IncludeLaunchDescription(PythonLaunchDescriptionSource("sub_launch.py"))
          return LaunchDescription([inc])
    expected:
      includes:
        - launch_description_source: sub_launch.py
          launch_arguments: {}
          included: {}

  - name: include_with_get_package_share_directory
    description: Uses get_package_share_directory to locate a sub-launch file
    input: |
      from launch import LaunchDescription
      from launch.actions import IncludeLaunchDescription
      from launch.launch_description_sources import PythonLaunchDescriptionSource
      from ament_index_python.packages import get_package_share_directory
      import os

      def generate_launch_description():
          launch_file = os.path.join(get_package_share_directory("demo_pkg"), "launch", "sub_launch.py")
          return LaunchDescription([
              IncludeLaunchDescription(
                  PythonLaunchDescriptionSource(launch_file)
              )
          ])
    expected:
      includes:
        - launch_description_source: ${os.path.join:['${get_package_share_directory:demo_pkg}', 'launch', 'sub_launch.py']}
          launch_arguments: {}
          included: {}