tests:
  - name: basic_declare_argument
    description: Declare a simple launch argument
    input: |
      from launch import LaunchDescription
      from launch.actions import DeclareLaunchArgument

      def generate_launch_description():
          return LaunchDescription([
              DeclareLaunchArgument('use_sim_time')
          ])
    expected:
      arguments:
        - name: use_sim_time
  
  - name: declare_with_default
    description: Launch argument with default value
    input: |
      from launch import LaunchDescription
      from launch.actions import DeclareLaunchArgument

      def generate_launch_description():
          return LaunchDescription([
              DeclareLaunchArgument('mode', default_value='auto')
          ])
    expected:
      arguments:
        - name: mode
          default: auto
    
  - name: declare_with_bool_default
    description: Launch argument with boolean default
    input: |
      from launch import LaunchDescription
      from launch.actions import DeclareLaunchArgument

      def generate_launch_description():
          return LaunchDescription([
              DeclareLaunchArgument('use_sim', default_value='true')
          ])
    expected:
      arguments:
        - name: use_sim
          default: true
    
  - name: declare_with_description
    description: Launch argument with description
    input: |
      from launch import LaunchDescription
      from launch.actions import DeclareLaunchArgument

      def generate_launch_description():
          return LaunchDescription([
              DeclareLaunchArgument('robot_name', description='Name of the robot')
          ])
    expected:
      arguments:
        - name: robot_name
          description: Name of the robot
    
  - name: declare_full
    description: Full DeclareLaunchArgument with all fields
    input: |
      from launch import LaunchDescription
      from launch.actions import DeclareLaunchArgument

      def generate_launch_description():
          return LaunchDescription([
              DeclareLaunchArgument(
                  name='world',
                  default_value='default_value',
                  description='World file to launch'
              )
          ])
    expected:
      arguments:
        - name: world
          default: default_value
          description: World file to launch

  - name: declare_with_launch_config_as_default
    description: Argument with LaunchConfiguration as default
    input: |
      from launch import LaunchDescription
      from launch.actions import DeclareLaunchArgument
      from launch.substitutions import LaunchConfiguration

      def generate_launch_description():
          return LaunchDescription([
              DeclareLaunchArgument(
                  name='map',
                  default_value=LaunchConfiguration('default_map')
              )
          ])
    expected:
      arguments:
        - name: map
          default: ${LaunchConfiguration:default_map}

  - name: declare_with_variable
    description: Argument using a variable
    input: |
      from launch import LaunchDescription
      from launch.actions import DeclareLaunchArgument

      default_val = 'base'

      def generate_launch_description():
          return LaunchDescription([
              DeclareLaunchArgument('frame', default_value=default_val)
          ])
    expected:
      arguments:
        - name: frame
          default: base

  - name: declare_with_environment_variable
    description: DeclareLaunchArgument with EnvironmentVariable default
    input: |
      from launch import LaunchDescription
      from launch.actions import DeclareLaunchArgument
      from launch.substitutions import EnvironmentVariable

      def generate_launch_description():
          return LaunchDescription([
              DeclareLaunchArgument(
                  name='robot_name',
                  default_value=EnvironmentVariable('ROBOT_NAME')
              )
          ])
    expected:
      arguments:
        - name: robot_name
          default: ${EnvironmentVariable:ROBOT_NAME}
  
  - name: declare_with_path_join_substitution
    description: DeclareLaunchArgument with PathJoinSubstitution default
    input: |
      from launch import LaunchDescription
      from launch.actions import DeclareLaunchArgument
      from launch.substitutions import PathJoinSubstitution, TextSubstitution

      def generate_launch_description():
          return LaunchDescription([
              DeclareLaunchArgument(
                  name='world_file',
                  default_value=PathJoinSubstitution([
                      TextSubstitution(text='/home/user'),
                      TextSubstitution(text='worlds'),
                      TextSubstitution(text='default.world')
                  ])
              )
          ])
    expected:
      arguments:
        - name: world_file
          default: ${PathJoinSubstitution:/home/user/worlds/default.world}