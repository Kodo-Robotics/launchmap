tests:
  - name: node_with_mixed_params
    description: Parameters include a dict and a YAML file
    input: |
      from launch import LaunchDescription
      from launch_ros.actions import Node

      def generate_launch_description():
          return LaunchDescription([
              Node(
                  package='demo',
                  executable='node',
                  parameters=[
                    {'use_sim_time': True},
                    'config/params.yaml'
                  ]
              )
          ])
    expected:
      nodes:
        - package: demo
          executable: node
          parameters:
            - use_sim_time: true
            - config/params.yaml
  
  - name: node_with_launch_config_default
    description: Parameters use LaunchConfiguration with default
    input: |
      from launch import LaunchDescription
      from launch_ros.actions import Node
      from launch.substitutions import LaunchConfiguration

      def generate_launch_description():
          return LaunchDescription([
              Node(
                  package='demo',
                  executable='node',
                  parameters=[
                    {'use_sim_time': LaunchConfiguration(name='use_sim_time', default='false')}
                  ]
              )
          ])
    expected:
      nodes:
        - package: demo
          executable: node
          parameters:
            - use_sim_time: ${LaunchConfiguration:use_sim_time:default=False}
    
  - name: node_with_dict_not_list
    description: Parameters provided directly as a dictionary
    input: |
      from launch import LaunchDescription
      from launch_ros.actions import Node

      def generate_launch_description():
          return LaunchDescription([
              Node(
                  package='demo',
                  executable='node',
                  parameters={'foo': 'bar'}
              )
          ])
    expected:
      nodes:
        - package: demo
          executable: node
          parameters:
            - foo: bar

  - name: node_with_variable_ref
    description: Parameters reference a variable instead of inline dict
    input: |
      from launch import LaunchDescription
      from launch_ros.actions import Node

      my_params = {'use_sim_time': True}

      def generate_launch_description():
          return LaunchDescription([
              Node(
                  package='demo',
                  executable='node',
                  parameters=my_params
              )
          ])
    expected:
      nodes:
        - package: demo
          executable: node
          parameters:
            - use_sim_time: true
    