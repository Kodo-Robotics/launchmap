tests:
  - name: node_with_undeclared_launch_config
    description: Node uses a LaunchConfiguration that is not declared
    input: |
      from launch import LaunchDescription
      from launch_ros.actions import Node
      from launch.substitutions import LaunchConfiguration

      def generate_launch_description():
          return LaunchDescription([
              Node(
                  package='demo',
                  executable='talker',
                  parameters=[{'use_sim_time': LaunchConfiguration('use_sim_time')}]
              )
          ])
    expected:
      arguments: []
      nodes:
        - package: demo
          executable: talker
          parameters:
            - use_sim_time: "${LaunchConfiguration:use_sim_time}"
      launch_argument_usages:
        - argument: use_sim_time
          path: nodes[0]
          field: parameters
      undeclared_launch_configurations:
        - use_sim_time
  
  - name: declared_and_undeclared
    description: Declared one LaunchConfiguration but missed another
    input: |
      from launch import LaunchDescription
      from launch_ros.actions import Node
      from launch.actions import DeclareLaunchArgument
      from launch.substitutions import LaunchConfiguration

      def generate_launch_description():
          return LaunchDescription([
              DeclareLaunchArgument('log_level'),
              Node(
                  package='demo',
                  executable='talker',
                  parameters=[{'use_sim_time': LaunchConfiguration('use_sim_time')}],
                  arguments=['--ros-args', '--log-level', LaunchConfiguration('log_level')]
              )
          ])
    expected:
      arguments:
        - name: log_level
      nodes:
        - package: demo
          executable: talker
          parameters:
            - use_sim_time: "${LaunchConfiguration:use_sim_time}"
          arguments:
            - --ros-args
            - --log-level
            - "${LaunchConfiguration:log_level}"
      launch_argument_usages:
        - argument: use_sim_time
          path: nodes[0]
          field: parameters
        - argument: log_level
          path: nodes[0]
          field: arguments
      undeclared_launch_configurations:
        - use_sim_time
  
  - name: all_launch_configs_declared
    description: No undeclared configurations
    input: |
      from launch import LaunchDescription
      from launch_ros.actions import Node
      from launch.actions import DeclareLaunchArgument
      from launch.substitions import LaunchConfiguration

      def generate_launch_description():
          return LaunchDescription([
              DeclareLaunchArgument('robot_name'),
              Node(
                  package='demo',
                  executable='listener',
                  name=LaunchConfiguration('robot_name')
              )
          ])
    expected:
      arguments:
        - name: robot_name
      nodes:
        - package: demo
          executable: listener
          name: "${LaunchConfiguration:robot_name}"
      launch_argument_usages:
        - argument: robot_name
          path: nodes[0]
          field: name
      undeclared_launch_configurations: []