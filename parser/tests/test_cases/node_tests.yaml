tests:
  - name: minimal_node
    description: Node with just package and executable
    input: |
      from launch import LaunchDescription
      from launch_ros.actions import Node

      def generate_launch_description():
          return LaunchDescription([
              Node(package='my_pkg', executable='my_node')
          ])
    expected:
      nodes:
        - package: my_pkg
          executable: my_node
  
  - name: node_with_fields
    description: Node with name, output, parameters and remapping
    input: |
      from launch import LaunchDescription
      from launch_ros.actions import Node
      from launch.substitutions import LaunchConfiguration

      def generate_launch_description():
          return LaunchDescription([
              Node(
                  package='demo_nodes',
                  executable='talker',
                  name='talker_node',
                  output='screen',
                  parameters=[{'use_sim_time': LaunchConfiguration('use_sim_time')}],
                  remappings=[('/input', '/robot1/input')]
              )
          ])
    expected:
      nodes:
        - package: demo_nodes
          executable: talker
          name: talker_node
          output: screen
          parameters:
            - use_sim_time: "${LaunchConfiguration:use_sim_time}"
          remappings: 
            - "('/input', '/robot1/input')"
  
  - name: node_from_variable_list
    description: Node assigned to a variable and passed to LaunchDescription
    input: |
      from launch import LaunchDescription
      from launch_ros.actions import Node

      def generate_launch_description():
          package = 'demo'
          nodes = [
              Node(package=package, executable='a'),
              Node(package=package, executable='b')
          ]
          return LaunchDescription(nodes)
    expected:
      nodes:
        - package: demo
          executable: a
        - package: demo
          executable: b
  
  - name: node_from_starred_list
    description: Starred list unpacking into LaunchDescription
    input: |
      from launch import LaunchDescription
      from launch_ros.actions import Node

      def generate_launch_description():
          base_nodes = [Node(package='demo', executable='x')]
          return LaunchDescription([*base_nodes])
    expected:
      nodes:
        - package: demo
          executable: x
  
  - name: node_via_add_action
    description: Node added using ld.add_action()
    input: |
      from launch import LaunchDescription
      from launch_ros.actions import Node

      def generate_launch_description():
          ld = LaunchDescription()
          ld.add_action(Node(package='demo', executable='add_action_test'))
          return ld
    expected:
      nodes:
        - package: demo
          executable: add_action_test

  - name: node_with_command_substitution
    input: |
      from launch import LaunchDescription
      from launch.substitutions import Command
      from launch_ros.actions import Node

      def generate_launch_description():
          return LaunchDescription([
              Node(
                  package='my_pkg',
                  executable='robot_node',
                  parameters=[{
                      'robot_description': Command(['xacro', 'robot.urdf.xacro'])
                  }]
              )
          ])
    expected:
      nodes:
        - package: my_pkg
          executable: robot_node
          parameters:
            - robot_description: "${Command:['xacro', 'robot.urdf.xacro']}"
